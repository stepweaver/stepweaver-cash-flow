import { formatCurrency, formatDate, formatDateForDisplay } from './utils';
import JSZip from 'jszip';

// Export to CSV format
export const exportToCSV = (data, filename = 'export.csv') => {
  if (!data || data.length === 0) return;

  // Get headers from first object
  const headers = Object.keys(data[0]);

  // Create CSV content
  const csvContent = [
    headers.join(','),
    ...data.map(row =>
      headers.map(header => {
        const value = row[header];
        // Handle values that need quotes (contain commas, quotes, or newlines)
        if (typeof value === 'string' && (value.includes(',') || value.includes('"') || value.includes('\n'))) {
          return `"${value.replace(/"/g, '""')}"`;
        }
        return value;
      }).join(',')
    )
  ].join('\n');

  // Create and download file
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// Export to JSON format
export const exportToJSON = (data, filename = 'export.json') => {
  if (!data) return;

  const jsonContent = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonContent], { type: 'application/json;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// Generate PDF HTML content
export const generatePDFHTML = (data, title = 'Export Report') => {
  const currentDate = new Date().toLocaleDateString();

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${title}</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .summary { margin-bottom: 30px; }
        .summary-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; }
        .summary-item { padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .summary-label { font-weight: bold; color: #666; }
        .summary-value { font-size: 18px; margin-top: 5px; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #f5f5f5; font-weight: bold; }
        .amount { text-align: right; }
        .footer { margin-top: 30px; text-align: center; color: #666; font-size: 12px; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>${title}</h1>
        <p>Generated on ${currentDate}</p>
      </div>
      
      <div class="summary">
        <h2>Summary</h2>
        <div class="summary-grid">
          <div class="summary-item">
            <div class="summary-label">Total Revenue</div>
            <div class="summary-value">${formatCurrency(data.totalRevenue || 0)}</div>
          </div>
          <div class="summary-item">
            <div class="summary-label">Total Expenses</div>
            <div class="summary-value">${formatCurrency(data.totalExpenses || 0)}</div>
          </div>
          <div class="summary-item">
            <div class="summary-label">Total Draws</div>
            <div class="summary-value">${formatCurrency(data.totalDraws || 0)}</div>
          </div>
          <div class="summary-item">
            <div class="summary-label">Net Income</div>
            <div class="summary-value">${formatCurrency(data.netIncome || 0)}</div>
          </div>
        </div>
      </div>
      
      <h2>Transactions</h2>
      <table>
        <thead>
          <tr>
            <th>Date</th>
            <th>Description</th>
            <th>Type</th>
            <th class="amount">Amount</th>
          </tr>
        </thead>
        <tbody>
          ${(data.transactions || []).map(transaction => `
            <tr>
              <td>${formatDate(transaction.date)}</td>
              <td>${transaction.description || ''}</td>
              <td>${transaction.type || ''}</td>
              <td class="amount">${formatCurrency(transaction.amount || 0)}</td>
            </tr>
          `).join('')}
        </tbody>
      </table>
      
      <div class="footer">
        <p>Report generated by StepWeaver Cash Flow</p>
      </div>
    </body>
    </html>
  `;
};

// Download file helper
export const downloadFile = (content, filename, mimeType = 'text/plain') => {
  const blob = new Blob([content], { type: mimeType });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', filename);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// Download receipts as ZIP with proper JSZip functionality
export const downloadReceiptsAsZip = async (receipts, transactionDescription) => {
  if (!receipts || receipts.length === 0) {
    console.warn('No receipts to download');
    return;
  }

  try {
    const zip = new JSZip();

    // Add each receipt to the ZIP
    receipts.forEach((receipt, index) => {
      if (receipt.data) {
        // Extract file extension from MIME type or use default
        const fileExtension = receipt.type?.split('/')[1] || 'jpg';
        const filename = `${transactionDescription}_receipt_${index + 1}.${fileExtension}`;

        // Convert base64 data to binary for ZIP
        const binaryData = atob(receipt.data.split(',')[1]);
        const bytes = new Uint8Array(binaryData.length);
        for (let i = 0; i < binaryData.length; i++) {
          bytes[i] = binaryData.charCodeAt(i);
        }

        // Add the receipt data to the ZIP
        zip.file(filename, bytes, { binary: true });
      }
    });

    // Generate the ZIP file
    const zipBlob = await zip.generateAsync({ type: 'blob' });

    // Download the ZIP file
    const link = document.createElement('a');
    const url = URL.createObjectURL(zipBlob);
    link.setAttribute('href', url);
    link.setAttribute('download', `${transactionDescription}_receipts.zip`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Clean up the URL object
    URL.revokeObjectURL(url);

    console.log(`Successfully downloaded ${receipts.length} receipts as ZIP`);
  } catch (error) {
    console.error('Error creating ZIP file:', error);

    // Fallback: download individual files if ZIP creation fails
    console.warn('ZIP creation failed, downloading individual files instead');
    receipts.forEach((receipt, index) => {
      if (receipt.data) {
        const fileExtension = receipt.type?.split('/')[1] || 'jpg';
        const filename = `${transactionDescription}_receipt_${index + 1}.${fileExtension}`;

        // For base64 data, we can download directly
        const link = document.createElement('a');
        link.href = receipt.data;
        link.download = filename;
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }
    });
  }
};
